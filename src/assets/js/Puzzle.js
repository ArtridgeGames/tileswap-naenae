import { Layout } from "./Layout.js";
import { useStore } from "../../store/store.js";
import { expect, require } from "./utils.js";
import { modulo } from "./LayoutShared.js";

/**
 * A class representing tile swap puzzles.
 * A puzzle is defined by a base layout, a target layout
 * and the ideal number of moves to solve it which is deduced from the solution array.
 */
export class Puzzle {
  static PUZZLES = [
    {
      base: [
        [0, 1, 1, 1],
        [1, 0, 1, 1],
        [1, 1, 0, 1],
        [1, 1, 1, 0]
      ],
      target: [
        [1, 1, 1, 0],
        [1, 1, 0, 1],
        [1, 0, 1, 1],
        [0, 1, 1, 1]
      ],
      modulo: 2,
      solution: [0, 1, 2, 3, 7, 11, 15, 14, 13, 12, 8, 4],
      unlockCategory: 2
    },
    {
      base: [
        [-1, 1, 1, -1],
        [0, -1, -1, 0],
        [0, -1, -1, 0],
        [-1, 1, 1, -1]
      ],
      target: [
        [-1, 0, 0, -1],
        [1, -1, -1, 1],
        [1, -1, -1, 1],
        [-1, 0, 0, -1]
      ],
      modulo: 2,
      solution: [1, 2, 7, 11, 14, 13, 8, 4],
      unlockCategory: 4
    },
    {
      base: [
        [-1, 1, -1],
        [0, 0, 0],
        [0, 1, 0],
        [0, 0, 0],
        [-1, 1, -1]
      ],
      target: [
        [-1, 1, -1],
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        [-1, 1, -1]
      ],
      modulo: 2,
      solution: [3, 6, 9, 10, 13, 11, 8, 5],
      unlockCategory: 4
    },
    {
      base: [
        [0, 1, 0],
        [0, -1, 0],
        [-1, 1, -1],
        [0, 1, 0]
      ],
      target: [
        [1, 1, 1],
        [0, -1, 0],
        [-1, 0, -1],
        [0, 1, 0]
      ],
      modulo: 2,
      solution: [0, 5, 7, 10],
      unlockCategory: 1
    },
    {
      base: [
        [0, 1, -1],
        [1, -1, 0],
        [-1, 0, 0]
      ],
      target: [
        [1, 1, -1],
        [1, -1, 0],
        [-1, 0, 0]
      ],
      modulo: 2,
      solution: [0, 5, 7],
      unlockCategory: 0
    },
    {
      base: [
        [-1, -1, 0, -1, -1],
        [-1, 1, 0, 1, -1],
        [0, 0, 0, 0, 0],
        [-1, 1, 0, 1, -1],
        [-1, -1, 0, -1, -1]
      ],
      target: [
        [-1, -1, 0, -1, -1],
        [-1, 0, 0, 0, -1],
        [0, 0, 0, 1, 1],
        [-1, 0, 1, 1, -1],
        [-1, -1, 1, -1, -1]
      ],
      modulo: 2,
      solution: [2, 7, 10, 11, 12, 18],
      unlockCategory: 6
    },
    // {
    //
    //   base: [
    //     [1, 1, 1],
    //     [1, 0, 1],
    //     [1, 1, 1]
    //   ],
    //   target: [
    //     [1, 1, 1],
    //     [1, 1, 1],
    //     [1, 1, 1]
    //   ],
    //   solution: [0, 1, 2, 3, 4, 5, 6, 7, 8]
    //  , unlockCategory: 0 },
    {
      // solution : 1, 2, 4, 6, 7, 8, 9, 10, 11, 16, 19
      base: [
        [0, 1, 1, 1, 0],
        [1, 0, 1, 0, 1],
        [1, 1, 0, 1, 1],
        [1, 0, 1, 0, 1],
        [0, 1, 1, 1, 0]
      ],
      target: [
        [1, 0, 0, 0, 1],
        [0, 1, 1, 1, 0],
        [0, 1, 1, 1, 0],
        [0, 1, 1, 1, 0],
        [1, 0, 0, 0, 1]
      ],
      modulo: 2,
      solution: [6, 9, 13, 14, 17, 21, 22, 24],
      unlockCategory: 3
    },
    {
      base: [
        [-1, -1, -1, -1, 0, 0, 0, -1, -1, -1, -1],
        [-1, -1, 0, 0, 0, 0, 0, 0, 0, -1, -1],
        [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1],
        [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1],
        [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1],
        [-1, -1, 0, 0, 0, 0, 0, 0, 0, -1, -1],
        [-1, -1, -1, -1, 0, 0, 0, -1, -1, -1, -1]
      ],
      target: [
        [-1, -1, -1, -1, 0, 0, 1, -1, -1, -1, -1],
        [-1, -1, 0, 0, 0, 0, 1, 1, 1, -1, -1],
        [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, -1],
        [-1, 0, 0, 0, 0, 0, 0, 0, 1, 1, -1],
        [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1],
        [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1],
        [1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1],
        [-1, 1, 1, 0, 0, 0, 0, 1, 1, 1, -1],
        [-1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1],
        [-1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1],
        [-1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1]
      ],
      modulo: 2,
      solution: [
        4, 5, 13, 14, 16, 17, 23, 25, 27, 28, 30, 34, 35, 44, 55, 56, 57, 64,
        67, 68, 90, 96, 104
      ],
      unlockCategory: 15
    },
    {
      base: [
        [1, 1, 1, -1],
        [1, 0, 0, 1],
        [1, 0, 0, 1],
        [-1, 1, 1, 1]
      ],
      target: [
        [1, 1, 1, -1],
        [1, 1, 0, 1],
        [1, 0, 1, 1],
        [-1, 1, 1, 1]
      ],
      modulo: 2,
      solution: [0, 1, 4, 5, 10, 11, 14, 15],
      unlockCategory: 2
    },
    {
      base: [
        [1, 1, 1, -1],
        [0, 1, -1, 0],
        [0, -1, 1, 0],
        [-1, 0, 0, 0]
      ],
      target: [
        [1, 1, 1, -1],
        [0, 0, -1, 0],
        [1, -1, 1, 0],
        [-1, 0, 1, 0]
      ],
      modulo: 2,
      solution: [0, 1, 4, 5, 10, 11, 13],
      unlockCategory: 4
    },
    {
      base: [
        [-1, 0, -1],
        [1, -1, 0],
        [1, 1, 0],
        [0, -1, 1],
        [-1, 0, -1]
      ],
      target: [
        [-1, 0, -1],
        [1, -1, 1],
        [0, 0, 1],
        [1, -1, 0],
        [-1, 1, -1]
      ],
      modulo: 2,
      solution: [6, 7, 9],
      unlockCategory: 4
    },
    {
      base: [
        [-1, -1, 0, -1, -1, -1],
        [-1, 0, 0, 0, -1, -1],
        [0, 0, 0, -1, 1, -1],
        [-1, 0, -1, 1, 1, 1],
        [-1, -1, 1, 1, 1, -1],
        [-1, -1, -1, 1, -1, -1]
      ],
      target: [
        [-1, -1, 1, -1, -1, -1],
        [-1, 1, 1, 1, -1, -1],
        [1, 1, 1, -1, 0, -1],
        [-1, 1, -1, 0, 0, 0],
        [-1, -1, 0, 0, 0, -1],
        [-1, -1, -1, 0, -1, -1]
      ],
      modulo: 2,
      solution: [2, 7, 9, 12, 16, 19, 23, 26, 28, 33],
      unlockCategory: 7
    },
    {
      base: [
        [-1, -1, -1, 1, -1, -1, -1],
        [-1, -1, 1, 1, 1, -1, -1],
        [1, 1, 1, 1, 1, 1, 1],
        [-1, 1, 1, 1, 1, 1, -1],
        [-1, -1, 1, 1, 1, -1, -1],
        [-1, 1, 1, -1, 1, 1, -1],
        [1, 1, -1, -1, -1, 1, 1]
      ],
      target: [
        [-1, -1, -1, 0, -1, -1, -1],
        [-1, -1, 0, 0, 0, -1, -1],
        [0, 0, 0, 0, 0, 0, 0],
        [-1, 0, 0, 0, 0, 0, -1],
        [-1, -1, 0, 0, 0, -1, -1],
        [-1, 0, 0, -1, 0, 0, -1],
        [0, 0, -1, -1, -1, 0, 0]
      ],
      modulo: 3,
      solution: [10, 14, 20, 31, 42, 48],
      unlockCategory: 9
    },
    {
      base: [
        [-1, 1, 1, 1, 1, -1],
        [1, 1, 0, 1, 1, 1],
        [-1, 1, 1, 1, 1, -1]
      ],
      target: [
        [-1, 1, 1, 1, 1, -1],
        [1, 1, 1, 0, 1, 1],
        [-1, 1, 1, 1, 1, -1]
      ],
      modulo: 2,
      solution: [1, 2, 3, 4, 6, 7, 10, 11, 13, 14, 15, 16],
      unlockCategory: 5
    },
    {
      base: [
        [1, 0, -1, -1, 0, 0],
        [-1, -1, 0, 0, -1, -1],
        [1, 1, 0, 1, 1, 1],
        [-1, 0, -1, -1, 1, -1]
      ],
      target: [
        [1, 1, -1, -1, 0, 1],
        [-1, -1, 1, 0, -1, -1],
        [1, 1, 0, 1, 0, 1],
        [-1, 1, -1, -1, 1, -1]
      ],
      modulo: 2,
      solution: [4, 8, 9, 12, 14, 17, 19, 22],
      unlockCategory: 5
    },
    {
      base: [
        [-1, 0, 0, -1, -1, -1, -1],
        [1, -1, -1, 0, -1, -1, -1],
        [-1, 1, -1, 0, -1, -1, -1],
        [-1, -1, 1, -1, 1, 1, -1],
        [-1, -1, -1, 0, -1, -1, 1],
        [-1, -1, -1, -1, 0, -1, 1],
        [-1, -1, -1, -1, -1, 0, -1]
      ],
      target: [
        [-1, 1, 1, -1, -1, -1, -1],
        [0, -1, -1, 1, -1, -1, -1],
        [-1, 0, -1, 1, -1, -1, -1],
        [-1, -1, 0, -1, 0, 0, -1],
        [-1, -1, -1, 1, -1, -1, 0],
        [-1, -1, -1, -1, 1, -1, 0],
        [-1, -1, -1, -1, -1, 1, -1]
      ],
      modulo: 2,
      solution: [1, 17, 23, 25, 31, 41],
      unlockCategory: 6
    },
    {
      base: [
        [0, 1, 1, -1, -1, -1],
        [1, -1, 1, -1, -1, -1],
        [-1, 1, 1, -1, -1, -1],
        [-1, -1, -1, 1, 1, -1],
        [-1, -1, -1, 1, -1, 1],
        [-1, -1, -1, -1, 1, 0]
      ],
      target: [
        [1, 1, 1, -1, -1, -1],
        [1, -1, 0, -1, -1, -1],
        [-1, 0, 0, -1, -1, -1],
        [-1, -1, -1, 0, 0, -1],
        [-1, -1, -1, 0, -1, 1],
        [-1, -1, -1, -1, 1, 1]
      ],
      modulo: 2,
      solution: [0, 1, 6, 8, 13, 21, 22, 27, 35],
      unlockCategory: 6
    },
    {
      base: [
        [-1, -1, -1, 1, -1, -1, -1],
        [-1, -1, 1, 0, 1, -1, -1],
        [-1, 1, 0, 0, 0, 1, -1],
        [1, 0, 0, 0, 0, 0, 1]
      ],
      target: [
        [-1, -1, -1, 1, -1, -1, -1],
        [-1, -1, 1, 1, 1, -1, -1],
        [-1, 1, 0, 0, 0, 1, -1],
        [1, 1, 1, 0, 1, 1, 1]
      ],
      modulo: 2,
      solution: [6, 7, 9, 11, 17, 18],
      unlockCategory: 7
    },
    {
      base: [
        [1, 1, 1, 1, 1],
        [1, -1, 1, -1, 1],
        [1, -1, 1, -1, 1],
        [1, 1, 1, 1, 1],
        [1, -1, -1, -1, 1],
        [1, 0, -1, 0, 1],
        [1, 1, 1, 1, 1]
      ],
      target: [
        [1, 1, 1, 1, 1],
        [1, -1, 1, -1, 1],
        [1, -1, 1, -1, 1],
        [0, 0, 0, 0, 0],
        [0, -1, -1, -1, 0],
        [0, 1, -1, 1, 0],
        [0, 0, 0, 0, 0]
      ],
      modulo: 2,
      solution: [1, 2, 3, 5, 7, 9, 15, 18, 30, 33],
      unlockCategory: 7
    },
    {
      base: [
        [-1, 1, 1, 1, -1, -1],
        [0, -1, 1, -1, 0, -1],
        [0, 0, -1, 0, 0, 0],
        [0, -1, 1, -1, -1, 0],
        [-1, 1, 1, -1, -1, -1],
        [-1, -1, 1, 1, -1, -1]
      ],
      target: [
        [-1, 0, 0, 0, -1, -1],
        [1, -1, 1, -1, 1, -1],
        [1, 0, -1, 0, 1, 1],
        [1, -1, 1, -1, -1, 0],
        [-1, 0, 0, -1, -1, -1],
        [-1, -1, 0, 1, -1, -1]
      ],
      modulo: 2,
      solution: [1, 3, 6, 8, 10, 13, 17, 18, 23, 25, 32, 33],
      unlockCategory: 7
    },
    {
      base: [
        [-1, -1, -1, -1, -1, 0, -1, -1],
        [0, 0, 0, 0, -1, 0, 0, -1],
        [0, -1, -1, -1, 0, 0, -1, 0],
        [-1, -1, 0, 0, -1, -1, -1, 0],
        [-1, -1, 0, 0, -1, 0, -1, -1],
        [-1, -1, -1, -1, 0, -1, -1, -1]
      ],
      target: [
        [-1, -1, -1, -1, -1, 0, -1, -1],
        [0, 0, 0, 0, -1, 0, 0, -1],
        [0, -1, -1, -1, 0, 0, -1, 0],
        [-1, -1, 0, 1, -1, -1, -1, 0],
        [-1, -1, 0, 0, -1, 0, -1, -1],
        [-1, -1, -1, -1, 0, -1, -1, -1]
      ],
      modulo: 2,
      solution: [8, 9, 11, 20, 21, 23, 26, 27, 31],
      unlockCategory: 7
    },
    {
      base: [
        [0, 0, 0, 0],
        [0, 1, 1, 0],
        [0, 1, 1, 0],
        [0, 0, 0, 0]
      ],
      target: [
        [0, 1, 1, 0],
        [1, 1, 1, 1],
        [1, 1, 1, 1],
        [0, 1, 1, 0]
      ],
      modulo: 2,
      solution: [1, 2, 4, 7, 8, 11, 13, 14],
      unlockCategory: 2
    },
    {
      base: [
        [0, 0, 1, 0, 0],
        [1, -1, 1, -1, 1],
        [0, -1, 1, -1, 1],
        [1, -1, 0, -1, 0],
        [0, 1, 0, 0, 1]
      ],
      target: [
        [0, 1, 0, 1, 0],
        [0, -1, 0, -1, 0],
        [0, -1, 0, -1, 0],
        [0, -1, 1, -1, 0],
        [0, 1, 1, 1, 0]
      ],
      modulo: 2,
      solution: [7, 10, 14, 15, 21, 24],
      unlockCategory: 5
    },
    // {
    //   // 0, 2, 3, 5
    //
    //   base: [
    //     [1, 0, 1],
    //     [0, 1, 0],
    //     [1, 1, 1]
    //   ],
    //   target: [
    //     [1, 0, 1],
    //     [0, 1, 0],
    //     [0, 1, 0]
    //   ],
    //   solution: [0, 2, 3, 5]
    //   , unlockCategory: 0
    // },
    {
      base: [
        [0, 0, 1],
        [0, -1, 1],
        [0, -1, 1]
      ],
      target: [
        [1, 1, 0],
        [1, -1, 0],
        [1, -1, 0]
      ],
      modulo: 2,
      solution: [0, 1, 2, 3, 5],
      unlockCategory: 0
    },
    {
      base: [
        [-1, 1, 1, -1],
        [1, 0, 1, 1],
        [1, 1, 0, 1],
        [-1, 1, 1, -1]
      ],
      target: [
        [-1, 0, 0, -1],
        [0, 1, 0, 0],
        [0, 0, 1, 0],
        [-1, 0, 0, -1]
      ],
      modulo: 2,
      solution: [1, 4, 5, 7, 13],
      unlockCategory: 2
    },
    {
      base: [
        [0, 1, 0],
        [1, 1, 1],
        [0, 1, 0],
        [0, 1, 0]
      ],
      target: [
        [1, 0, 1],
        [1, 0, 1],
        [0, 0, 0],
        [1, 0, 1]
      ],
      modulo: 2,
      solution: [0, 1, 2, 3, 5, 6, 8, 9, 10, 11],
      unlockCategory: 2
    },
    {
      base: [
        [0, 0, 0],
        [0, 1, 0],
        [0, 1, 0]
      ],
      target: [
        [1, 1, 1],
        [1, 1, 1],
        [1, 0, 1]
      ],
      modulo: 2,
      solution: [0, 1, 2, 3, 5, 6, 7, 8],
      unlockCategory: 1
    },
    {
      base: [
        [-1, -1, 1, 1, 1],
        [-1, -1, 1, 0, 1],
        [1, 1, 1, 1, 1],
        [1, 0, 1, -1, -1],
        [1, 1, 1, -1, -1]
      ],
      target: [
        [-1, -1, 1, 1, 1],
        [-1, -1, 0, 0, 1],
        [1, 0, 0, 0, 1],
        [1, 0, 0, -1, -1],
        [1, 1, 1, -1, -1]
      ],
      modulo: 2,
      solution: [2, 3, 4, 7, 8, 9, 13, 14],
      unlockCategory: 3
    },
    {
      base: [
        [-1, 1, 1, -1],
        [1, 1, -1, 1],
        [-1, 1, 1, 1],
        [-1, -1, 1, -1]
      ],
      target: [
        [-1, 0, 0, -1],
        [0, 0, -1, 0],
        [-1, 0, 0, 0],
        [-1, -1, 0, -1]
      ],
      modulo: 2,
      solution: [2, 4, 5, 7, 9, 10, 14],
      unlockCategory: 4
    },
    {
      base: [
        [-1, 1, -1],
        [1, -1, 1],
        [1, 1, 1],
        [1, -1, 1],
        [1, -1, 1]
      ],
      target: [
        [-1, 0, -1],
        [1, -1, 1],
        [1, 1, 1],
        [1, -1, 1],
        [1, -1, 1]
      ],
      modulo: 2,
      solution: [1, 3, 5, 9, 11, 12, 14],
      unlockCategory: 1
    },
    {
      base: [
        [-1, 0, -1],
        [0, -1, 0],
        [1, -1, 1],
        [1, 1, -1],
        [-1, -1, 1]
      ],
      target: [
        [-1, 1, -1],
        [1, -1, 1],
        [1, -1, 1],
        [0, 0, -1],
        [-1, -1, 0]
      ],
      modulo: 2,
      solution: [1, 3, 5, 6, 8, 14],
      unlockCategory: 1
    },
    {
      base: [
        [1, 1, 1],
        [0, -1, 1],
        [1, 1, 1],
        [1, -1, 0],
        [1, 1, 1]
      ],
      target: [
        [1, 1, 1],
        [1, -1, 0],
        [1, 1, 1],
        [0, -1, 1],
        [1, 1, 1]
      ],
      modulo: 2,
      solution: [0, 2, 3, 5, 6, 8],
      unlockCategory: 1
    },
    {
      base: [
        [1, 1, -1],
        [1, -1, 0],
        [0, 0, -1],
        [0, -1, 1],
        [0, 0, -1]
      ],
      target: [
        [0, 0, -1],
        [0, -1, 1],
        [1, 1, -1],
        [1, -1, 0],
        [1, 1, -1]
      ],
      modulo: 2,
      solution: [0, 6, 7, 9],
      unlockCategory: 1
    },
    {
      //TODO FIND OPTIMAL NUMBER OF MOVES
      base: [
        [1, 1, 1, -1],
        [-1, 1, 1, 1],
        [1, 1, 1, -1],
        [-1, 1, 1, 1]
      ],
      target: [
        [0, 1, 1, -1],
        [-1, 0, 1, 0],
        [1, 0, 1, -1],
        [-1, 1, 0, 0]
      ],
      modulo: 2,
      solution: [7, 8, 9, 10, 11],
      unlockCategory: 1
    },
    {
      base: [
        [0, 1, 0, 0, 1, 0, 1],
        [1, -1, -1, 1, -1, -1, 1],
        [1, -1, 0, 0, 1, -1, 1],
        [0, 0, 1, 1, 0, 1, 0],
        [0, -1, 1, 1, 1, -1, 1],
        [0, -1, -1, 0, -1, -1, 0],
        [1, 0, 1, 0, 0, 0, 1]
      ],
      target: [
        [1, 1, 1, 1, 1, 1, 1],
        [1, -1, -1, 0, -1, -1, 1],
        [1, -1, 0, 0, 0, -1, 1],
        [1, 0, 0, 0, 0, 0, 1],
        [1, -1, 0, 0, 0, -1, 1],
        [1, -1, -1, 0, -1, -1, 1],
        [1, 1, 1, 1, 1, 1, 1]
      ],
      modulo: 2,
      solution: [
        1, 2, 3, 4, 14, 16, 17, 21, 28, 31, 34, 35, 41, 42, 44, 45, 46, 47
      ],
      unlockCategory: 12
    },
    {
      base: [
        [0, 1, -1, 1, 0],
        [1, 1, 0, 1, 1],
        [-1, 1, 0, 0, -1],
        [1, 0, 0, 0, 1],
        [0, 0, -1, 0, 0]
      ],
      target: [
        [0, 0, -1, 0, 0],
        [1, 0, 0, 0, 1],
        [-1, 0, 0, 1, -1],
        [1, 1, 0, 0, 0],
        [0, 1, -1, 0, 1]
      ],
      modulo: 2,
      solution: [1, 3, 4, 6, 7, 17, 18],
      unlockCategory: 5
    },
    {
      base: [
        [1, 0, 1, 0, 1],
        [0, 1, 0, 1, 0],
        [1, 0, 1, 0, 1],
        [0, 1, 0, 1, 0],
        [1, 0, 1, 0, 1]
      ],
      target: [
        [0, 1, 0, 1, 0],
        [1, 0, 1, 0, 1],
        [0, 1, 0, 1, 0],
        [1, 0, 1, 0, 1],
        [0, 1, 0, 1, 0]
      ],
      modulo: 2,
      solution: [6, 9, 21, 24],
      unlockCategory: 3
    },
    {
      base: [
        [-1, -1, -1, -1, -1, 0],
        [1, 1, 0, -1, -1, 1],
        [0, -1, -1, 1, 0, 1],
        [1, -1, 0, -1, -1, -1],
        [-1, -1, 1, -1, -1, -1],
        [1, 0, 0, -1, -1, -1]
      ],
      target: [
        [-1, -1, -1, -1, -1, 1],
        [1, 1, 1, -1, -1, 1],
        [1, -1, -1, 1, 1, 1],
        [1, -1, 0, -1, -1, -1],
        [-1, -1, 1, -1, -1, -1],
        [1, 1, 1, -1, -1, -1]
      ],
      modulo: 2,
      solution: [6, 11, 12, 15, 17, 18, 20, 32],
      unlockCategory: 5
    },
    {
      base: [
        [-1, 0, 0, 0, -1],
        [0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0],
        [-1, 0, 0, 0, -1]
      ],
      target: [
        [-1, 1, 1, 1, -1],
        [1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1],
        [-1, 1, 1, 1, -1]
      ],
      modulo: 2,
      solution: [2, 10, 12, 13, 17],
      unlockCategory: 6
    },
    {
      base: [
        [0, 1, 0, 0, 1],
        [-1, 0, -1, 1, -1],
        [-1, 1, -1, 0, -1],
        [-1, 1, -1, 0, -1],
        [0, 0, 1, 1, 1]
      ],
      target: [
        [1, 1, 1, 0, 0],
        [-1, 1, -1, 1, -1],
        [-1, 1, -1, 0, -1],
        [-1, 1, -1, 1, -1],
        [1, 1, 1, 0, 0]
      ],
      modulo: 2,
      solution: [2, 3, 6, 11, 20, 24],
      unlockCategory: 5
    },
    {
      base: [
        [0, 0, 0, 1, 0, 0],
        [0, 1, 1, 1, 1, 1],
        [0, 1, 0, 0, 1, 0],
        [1, 1, 0, 1, 1, 1],
        [1, 1, 1, 0, 0, 1],
        [1, 0, 0, 1, 1, 0]
      ],
      target: [
        [0, 1, 0, 0, 0, 1],
        [0, 0, 1, 1, 0, 1],
        [1, 0, 0, 0, 1, 0],
        [0, 1, 1, 1, 1, 0],
        [1, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0]
      ],
      modulo: 2,
      solution: [2, 3, 5, 10, 11, 16, 18, 23, 24, 25, 26, 27, 28, 31, 34],
      unlockCategory: 8
    },
    {
      base: [
        [-1, -1, 0, -1, -1, -1],
        [-1, 0, 1, 0, -1, -1],
        [-1, -1, 0, -1, 0, -1],
        [-1, 0, -1, 0, 1, 0],
        [0, 1, 0, -1, 0, -1],
        [-1, 0, -1, -1, -1, -1]
      ],
      target: [
        [-1, -1, 0, -1, -1, -1],
        [-1, 0, 0, 0, -1, -1],
        [-1, -1, 0, -1, 0, -1],
        [-1, 0, -1, 0, 0, 0],
        [0, 0, 0, -1, 0, -1],
        [-1, 0, -1, -1, -1, -1]
      ],
      modulo: 2,
      solution: [2, 9, 14, 16, 19, 21, 23, 25, 26],
      unlockCategory: 6
    },
    {
      base: [
        [-1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1],
        [-1, 1, 1, 1, 1, 1, 1, 1, 0, 1, -1],
        [-1, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1],
        [-1, -1, 0, 0, 0, 0, 0, 0, -1, -1, -1]
      ],
      target: [
        [-1, -1, 0, 0, 0, 0, 0, -1, -1, -1, -1],
        [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1],
        [-1, 0, 0, 0, 1, 1, 0, 1, -1, -1, -1],
        [0, 1, 0, 1, 1, 1, 0, 1, 1, 1, -1],
        [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1],
        [-1, 0, 1, 1, 1, 1, 0, 0, 0, 0, -1],
        [-1, -1, 1, 1, 1, 1, 1, 1, -1, -1, -1]
      ],
      modulo: 2,
      solution: [
        2, 4, 12, 13, 18, 20, 34, 35, 38, 42, 44, 45, 46, 48, 49, 52, 53, 59,
        60, 63, 64, 68, 70
      ],
      unlockCategory: 15
    },
    {
      base: [
        [-1, -1, -1, -1, -1, -1, 0, -1, -1],
        [-1, -1, -1, -1, -1, -1, 0, 0, -1],
        [-1, -1, -1, -1, -1, -1, -1, 0, -1],
        [-1, -1, -1, -1, -1, -1, -1, 0, 0],
        [-1, -1, -1, -1, -1, -1, 0, 0, 0],
        [-1, -1, -1, -1, -1, 0, 0, 0, 0],
        [0, 0, -1, -1, 0, 0, 1, 0, -1],
        [-1, 0, 0, 0, 0, 0, 0, 1, -1],
        [-1, -1, -1, 0, 0, 0, -1, -1, -1]
      ],
      target: [
        [-1, -1, -1, -1, -1, -1, 1, -1, -1],
        [-1, -1, -1, -1, -1, -1, 1, 1, -1],
        [-1, -1, -1, -1, -1, -1, -1, 1, -1],
        [-1, -1, -1, -1, -1, -1, -1, 1, 0],
        [-1, -1, -1, -1, -1, -1, 1, 0, 0],
        [-1, -1, -1, -1, -1, 1, 0, 0, 0],
        [1, 1, -1, -1, 1, 0, 0, 0, -1],
        [-1, 1, 1, 1, 0, 0, 0, 0, -1],
        [-1, -1, -1, 0, 0, 0, -1, -1, -1]
      ],
      modulo: 2,
      solution: [16, 42, 43, 44, 50, 51, 52, 53, 55, 58, 59, 70],
      unlockCategory: 9
    },
    {
      base: [
        [0, 0, 0, 0, 0, 0, 0],
        [0, 1, 0, 1, 0, 1, 0],
        [0, 0, 0, 0, 0, 0, 0],
        [0, 1, 0, 1, 0, 1, 0],
        [0, 0, 0, 0, 0, 0, 0],
        [0, 1, 0, 1, 0, 1, 0],
        [0, 0, 0, 0, 0, 0, 0]
      ],
      target: [
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0],
        [0, 1, 0, 1, 0, 1, 0],
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0]
      ],
      modulo: 2,
      solution: [
        0, 1, 2, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 18, 19, 20, 28, 29,
        30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 46, 47, 48
      ],
      unlockCategory: 9
    },
    {
      base: [
        [1, 1, 1, 0, 0, 0, 0],
        [1, 1, 1, 0, 0, 0, 0],
        [1, 1, 1, 0, 0, 0, 0],
        [1, 1, 1, 0, 1, 1, 1],
        [0, 0, 0, 0, 1, 1, 1],
        [0, 0, 0, 0, 1, 1, 1],
        [0, 0, 0, 0, 1, 1, 1]
      ],
      target: [
        [0, 0, 0, 0, 1, 1, 1],
        [0, 0, 0, 0, 1, 1, 1],
        [0, 0, 0, 0, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 0, 0, 0, 0],
        [1, 1, 1, 0, 0, 0, 0],
        [1, 1, 1, 0, 0, 0, 0]
      ],
      modulo: 2,
      solution: [
        0, 1, 3, 5, 6, 7, 10, 13, 21, 22, 24, 26, 27, 35, 38, 41, 42, 43, 45,
        47, 48
      ],
      unlockCategory: 10
    },
    {
      base: [
        [-1, 1, 0, -1, 1, 1, -1],
        [1, 1, 0, 1, 1, 1, 1],
        [1, 1, 0, 0, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 1],
        [-1, 1, 1, 0, 1, 1, -1],
        [-1, -1, 1, 1, 0, -1, -1],
        [-1, -1, -1, 1, -1, -1, -1]
      ],
      target: [
        [-1, 1, 1, -1, 1, 1, -1],
        [1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1],
        [-1, 1, 1, 1, 1, 1, -1],
        [-1, -1, 1, 1, 1, -1, -1],
        [-1, -1, -1, 1, -1, -1, -1]
      ],
      modulo: 2,
      solution: [5, 7, 8, 12, 21, 22, 24, 27, 33],
      unlockCategory: 9
    },
    {
      base: [
        [1, -1, 1, -1, 1],
        [-1, 1, -1, 1, -1],
        [1, -1, 0, -1, 1],
        [-1, 1, -1, 1, -1],
        [1, -1, 1, -1, 1]
      ],
      target: [
        [1, -1, 0, -1, 1],
        [-1, 0, -1, 0, -1],
        [0, -1, 1, -1, 0],
        [-1, 0, -1, 0, -1],
        [1, -1, 0, -1, 1]
      ],
      modulo: 2,
      solution: [2, 10, 12, 14, 22],
      unlockCategory: 3
    },
    {
      base: [
        [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],
        [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],
        [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],
        [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],
        [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],
        [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1]
      ],
      target: [
        [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0],
        [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0],
        [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0],
        [0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0],
        [1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1],
        [1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1],
        [1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1],
        [1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1],
        [0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0],
        [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0],
        [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0],
        [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0]
      ],
      modulo: 2,
      solution: [
        1, 2, 3, 5, 6, 8, 9, 10, 12, 13, 14, 19, 21, 23, 24, 25, 28, 31, 34, 35,
        36, 47, 50, 52, 53, 54, 57, 58, 60, 64, 65, 66, 67, 71, 72, 76, 77, 78,
        79, 83, 85, 86, 89, 90, 91, 93, 96, 107, 108, 109, 112, 115, 118, 119,
        120, 122, 124, 129, 130, 131, 133, 134, 135, 137, 138, 140, 141, 142
      ],
      unlockCategory: 14
    },
    {
      base: [
        [-1, -1, -1, 1, -1, -1, -1],
        [-1, -1, 0, -1, 0, -1, -1],
        [-1, 0, -1, 1, -1, 0, -1],
        [1, -1, 1, -1, 1, -1, 1],
        [-1, 0, -1, 1, -1, 0, -1],
        [-1, -1, 0, -1, 0, -1, -1],
        [-1, -1, -1, 1, -1, -1, -1]
      ],
      target: [
        [-1, -1, -1, 0, -1, -1, -1],
        [-1, -1, 0, -1, 0, -1, -1],
        [-1, 0, -1, 1, -1, 0, -1],
        [0, -1, 1, -1, 1, -1, 0],
        [-1, 0, -1, 1, -1, 0, -1],
        [-1, -1, 0, -1, 0, -1, -1],
        [-1, -1, -1, 0, -1, -1, -1]
      ],
      modulo: 2,
      solution: [11, 15, 17, 23, 25, 31, 33, 37],
      unlockCategory: 3
    },
    {
      base: [
        [-1, -1, 1, 1, 1, 1, 1, -1, -1],
        [-1, 1, 1, 1, 1, 1, 1, 1, -1],
        [1, 1, -1, -1, 1, -1, -1, 1, 1],
        [1, 1, -1, 0, 1, -1, 0, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1, -1, 1, -1, 1, -1, 1, -1, 1]
      ],
      target: [
        [-1, -1, 0, 0, 0, 0, 0, -1, -1],
        [-1, 0, 0, 0, 0, 0, 0, 0, -1],
        [0, 0, -1, -1, 0, -1, -1, 0, 0],
        [0, 0, -1, 1, 0, -1, 1, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 1, 0, 1, 1, 0],
        [0, 0, 1, 0, 0, 1, 0, 0, 1],
        [0, -1, 0, -1, 0, -1, 0, -1, 0]
      ],
      modulo: 2,
      solution: [
        2, 4, 5, 13, 26, 27, 30, 31, 36, 37, 40, 43, 44, 48, 49, 53, 54, 57, 60,
        71
      ],
      unlockCategory: 11
    },
    {
      base: [
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]
      ],
      target: [
        [1, 1, 0],
        [0, 1, 0],
        [0, 1, 1]
      ],
      modulo: 2,
      solution: [0, 1, 4, 7, 8],
      unlockCategory: 0
    },
    {
      base: [
        [1, 1, 0],
        [1, -1, 0],
        [0, 0, 1]
      ],
      target: [
        [0, 0, 0],
        [0, -1, 0],
        [0, 0, 0]
      ],
      modulo: 2,
      solution: [1, 2, 3, 4, 5, 6],
      unlockCategory: 0
    },
    {
      base: [
        [1, 1, 1, 1, 1],
        [1, 0, 0, 0, 1],
        [1, 0, 0, 0, 1],
        [1, 0, 0, 0, 1],
        [1, 1, 1, 1, 1]
      ],
      target: [
        [2, 2, 2, 0, 0],
        [2, 2, 0, 0, 0],
        [2, 0, 0, 0, 2],
        [0, 0, 0, 2, 2],
        [0, 0, 2, 2, 2]
      ],
      modulo: 3,
      solution: [0, 0, 2, 2, 3, 3, 6, 6, 7, 10, 10, 11, 12, 15, 15, 18],
      unlockCategory: 10
    },
    {
      base: [
        [-1, -1, -1, -1, -1, -1, 1, 0, 2, 1],
        [-1, -1, -1, -1, -1, 2, -1, -1, -1, -1],
        [-1, -1, -1, 0, -1, 1, -1, -1, -1, -1],
        [0, 1, 2, -1, 2, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, 1, -1, -1, -1, -1, -1]
      ],
      target: [
        [-1, -1, -1, -1, -1, -1, 1, 1, 1, 1],
        [-1, -1, -1, -1, -1, 2, -1, -1, -1, -1],
        [-1, -1, -1, 2, -1, 2, -1, -1, -1, -1],
        [1, 1, 1, -1, 0, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, 0, -1, -1, -1, -1, -1]
      ],
      modulo: 3,
      solution: [6, 6, 7, 7, 15, 15, 25, 25, 30, 32, 44, 44],
      unlockCategory: 10
    },
    {
      base: [
        [2, -1, 0, 0, 0, -1, 2],
        [2, 0, 0, 1, 0, 0, 2],
        [2, -1, 0, 0, 0, -1, 2]
      ],
      target: [
        [0, -1, 0, 1, 0, -1, 0],
        [0, 1, 1, 2, 1, 1, 0],
        [0, -1, 0, 1, 0, -1, 0]
      ],
      modulo: 3,
      solution: [2, 3, 4, 7, 9, 11, 13, 16, 17, 18, 2, 3, 4, 9, 11, 16, 17, 18],
      unlockCategory: 10
    },
    {
      base: [
        [-1, -1, -1, 1, -1, -1, -1],
        [-1, -1, 1, 1, 1, -1, -1],
        [-1, 1, 1, 2, 1, 1, -1],
        [1, 1, 1, 1, 1, 1, 1],
        [-1, 0, 0, 0, 0, 0, -1],
        [-1, 0, 0, -1, 0, 0, -1],
        [-1, 0, 0, -1, 0, 0, -1],
        [-1, 0, 0, -1, 0, 0, -1]
      ],
      target: [
        [-1, -1, -1, 2, -1, -1, -1],
        [-1, -1, 2, 2, 2, -1, -1],
        [-1, 2, 2, 1, 2, 2, -1],
        [2, 2, 1, 1, 1, 2, 2],
        [-1, 0, 0, 0, 0, 0, -1],
        [-1, 0, 0, -1, 0, 0, -1],
        [-1, 0, 0, -1, 0, 0, -1],
        [-1, 0, 0, -1, 0, 0, -1]
      ],
      modulo: 3,
      solution: [10, 15, 18, 21, 22, 23, 27, 29, 24, 17, 25, 30, 17, 25, 30],
      unlockCategory: 10
    },
    {
      base: [
        [0, 0, -1, -1, 1, 1],
        [-1, -1, 0, 2, -1, -1],
        [1, 1, 2, 0, 0, 0],
        [-1, 1, -1, -1, 0, -1]
      ],
      target: [
        [2, 1, -1, -1, 1, 2],
        [-1, -1, 0, 0, -1, -1],
        [2, 1, 0, 0, 1, 2],
        [-1, 2, -1, -1, 2, -1]
      ],
      modulo: 3,
      solution: [1, 8, 9, 16, 1, 8, 9, 16, 4, 12],
      unlockCategory: 10
    },
    {
      target: [
        [1, -1, -1, -1, 0],
        [1, 1, -1, -1, 0],
        [0, 1, 1, -1, 0],
        [0, -1, 1, 1, 0],
        [0, -1, -1, 1, 0]
      ],
      base: [
        [1, -1, -1, -1, 1],
        [1, 0, -1, -1, 1],
        [1, 0, 0, -1, 1],
        [1, -1, 0, 0, 1],
        [1, -1, -1, 1, 1]
      ],
      modulo: 2,
      solution: [4, 12, 15, 17, 18],
      unlockCategory: 1
    },
    {
      base: [
        [-1, -1, 0, -1, 0, -1, -1, -1, -1, -1],
        [-1, -1, 0, -1, -1, 0, -1, -1, -1, -1],
        [0, 0, -1, 0, 0, -1, -1, 0, 0, -1],
        [-1, -1, -1, 0, 0, -1, 0, 0, 0, 0],
        [-1, -1, -1, -1, 0, 0, 0, 0, 0, 1],
        [-1, -1, -1, -1, -1, 0, 0, -1, -1, -1]
      ],
      target: [
        [-1, -1, 0, -1, 0, -1, -1, -1, -1, -1],
        [-1, -1, 0, -1, -1, 0, -1, -1, -1, -1],
        [0, 0, -1, 0, 0, -1, -1, 0, 0, -1],
        [-1, -1, -1, 0, 0, -1, 0, 0, 1, 0],
        [-1, -1, -1, -1, 0, 0, 0, 0, 0, 0],
        [-1, -1, -1, -1, -1, 0, 0, -1, -1, -1]
      ],
      modulo: 2,
      solution: [20, 21, 23, 28, 34, 36, 37, 38, 39, 49, 55, 56],
      unlockCategory: 8
    }
  ]
    .sort((a, b) => a.solution.length - b.solution.length)
    .map((e, id) => {
      const {
        base: baseMatrix,
        target: targetMatrix,
        solution,
        modulo,
        unlockCategory
      } = e;

      const width = baseMatrix[0].length;
      const height = baseMatrix.length;
      const exclude = Layout.getExcludeFromMatrix(baseMatrix);

      const base = new Layout({
        width,
        height,
        exclude,
        unlockCategory: 0
      });
      base.setMatrix(baseMatrix);

      const target = new Layout({
        width,
        height,
        exclude,
        unlockCategory: 0
      });
      target.setMatrix(targetMatrix);

      return new Puzzle({
        base,
        target,
        solution,
        id,
        modulo: modulo ?? 2,
        unlockCategory
      });
    });

  static get CATEGORIES() {
    const categories = new Set(Puzzle.PUZZLES.map((e) => e.unlockCategory))
      .size;
    return new Array(categories).fill(0).map((_, i) => {
      return Puzzle.PUZZLES.filter((e) => e.unlockCategory === i);
    });
  }
  get silverMoves() {
    const sol = this.solution.length;
    return Math.max(
      sol + 2 * this.modulo,
      Math.ceil(sol * 1.5) + ((sol * 1.5) % this.modulo) ? this.modulo : 0
    );
  }

  static MEDALS = {
    NOT_COMPLETED: -1,
    BRONZE: 0,
    SILVER: 1,
    GOLD: 2
  };

  /**
   * Creates a new puzzle.
   * @param {Layout} base
   * @param {Layout} target
   * @param {Number[]} solution
   */
  constructor({ base, target, solution, id, modulo, unlockCategory }) {
    require(base, target, solution, id, modulo);

    this.base = base;
    this.target = target;
    this.solution = solution;
    this.id = id;
    this.modulo = modulo;
    this.unlockCategory = unlockCategory ?? Math.floor(id / 5) + 1;
    this.score = new Array(3)
      .fill()
      .map((_, i) => Math.round((this.solution.length * 20 * (i + 1)) / 6));

    this.latestAddedScore = 0;
  }

  /**
   * Checks if the puzzle is solved.
   * @param {Layout} layout the layout to check
   */
  isSolvedWith(layout) {
    return this.target.matrix
      .every((row, i) =>
        row.every((tile, j) => tile === layout.matrix[i][j])
      );
  }

  targetIsWhite(row, column) {
    if (column === undefined)
      return (
        this.target.matrix[Math.floor(row / this.target.width)][
          row % this.target.width
        ] ===
        this.modulo - 1
      );
    return this.target.matrix[row][column] === this.modulo - 1;
  }

  baseIsWhite(row, column) {
    if (column === undefined)
      return (
        this.base.matrix[Math.floor(row / this.base.width)][
          row % this.base.width
        ] ===
        this.modulo - 1
      );
    return this.base.matrix[row][column] === this.modulo - 1;
  }

  medalFromMoves(moves) {
    return !this.solved
      ? {
          medal: Puzzle.MEDALS.NOT_COMPLETED,
          movesRequiredForNextMedal: -1
        }
      : moves <= this.solution.length
      ? {
          medal: Puzzle.MEDALS.GOLD,
          movesRequiredForNextMedal: -1
        }
      : moves <= this.silverMoves
      ? {
          medal: Puzzle.MEDALS.SILVER,
          movesRequiredForNextMedal: this.solution.length
        }
      : {
          medal: Puzzle.MEDALS.BRONZE,
          movesRequiredForNextMedal: this.silverMoves
        };
  }

  get solved() {
    const store = useStore();
    return store.stats.puzzlesCompleted.some(({ id }) => {
      return id === this.id;
    });
  }

  get completionMoves() {
    const store = useStore();
    for (let i = 0; i < store.stats.puzzlesCompleted.length; i++) {
      const data = store.stats.puzzlesCompleted[i];
      if (data.id === this.id) {
        return data.completionMoves;
      }
    }
    return -1;
  }

  set completionMoves(val) {
    expect(this.unlockCategory >= 0);
    const store = useStore();
    for (let i = 0; i < store.stats.puzzlesCompleted.length; i++) {
      const data = store.stats.puzzlesCompleted[i];
      if (data.id === this.id) {
        if (data.completionMoves <= val) {
          this.latestAddedScore = 0;
          return;
        }

        // if the new medal is higher than the old one, add the score
        const newMedal = this.medalFromMoves(val).medal;
        const oldMedal = this.medalFromMoves(data.completionMoves).medal;

        let toAdd = 0;
        for (let i = oldMedal + 1; i <= newMedal; i++) {
          toAdd += this.score[i] * 2 ** this.unlockCategory;
        }
        toAdd = Math.round(toAdd);
        store.score += toAdd;
        this.latestAddedScore = toAdd;

        data.completionMoves = Math.min(val, data.completionMoves);
        return;
      }
    }
    store.stats.puzzlesCompleted.push({ id: this.id, completionMoves: val });

    // if the new medal is higher than the old one, add the score
    let toAdd = 0;
    for (let i = 0; i <= this.medalFromMoves(val).medal; i++) {
      toAdd += this.score[i] * 2 ** this.unlockCategory;
    }
    store.score += toAdd;
    this.latestAddedScore = toAdd;
  }
}
